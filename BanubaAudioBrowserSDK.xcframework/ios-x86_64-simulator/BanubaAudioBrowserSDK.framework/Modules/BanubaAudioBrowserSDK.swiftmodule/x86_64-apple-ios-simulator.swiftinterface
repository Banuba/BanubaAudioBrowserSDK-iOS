// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.3.2 (swiftlang-1200.0.45 clang-1200.0.32.28)
// swift-module-flags: -target x86_64-apple-ios11.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name BanubaAudioBrowserSDK
import AVFoundation
import AVKit
@_exported import BanubaAudioBrowserSDK
import BanubaMusicEditorSDK
import Foundation
import LocalAuthentication
import MediaPlayer
import Swift
import UIKit
extension SmallActivityIndicatorConfiguration {
  public static var `default`: BanubaAudioBrowserSDK.SmallActivityIndicatorConfiguration {
    get
  }
}
public protocol AudioBrowserSelectionViewControllerDelegate : AnyObject {
  func audioBrowserSelectionViewController(viewController: BanubaAudioBrowserSDK.AudioBrowserSelectionViewController, didSelectFile url: Foundation.URL, title: Swift.String, id: Swift.Int32)
  func audioBrowserSelectionViewControllerDidCancel(viewController: BanubaAudioBrowserSDK.AudioBrowserSelectionViewController)
  func audioBrowserSelectionViewController(viewController: BanubaAudioBrowserSDK.AudioBrowserSelectionViewController, didStopUsingTrackWithId trackId: Swift.Int32)
}
public protocol AudioBrowserSelectionViewController : UIKit.UIViewController {
  var navigationDelegate: BanubaAudioBrowserSDK.AudioBrowserSelectionViewControllerDelegate? { get set }
}
@objc @_hasMissingDesignatedInitializers public class EditorNavigationController : UIKit.UINavigationController, BanubaAudioBrowserSDK.AudioBrowserSelectionViewController, BanubaMusicEditorSDK.TrackSelectionViewController {
  weak public var navigationDelegate: BanubaAudioBrowserSDK.AudioBrowserSelectionViewControllerDelegate?
  @objc override dynamic public var supportedInterfaceOrientations: UIKit.UIInterfaceOrientationMask {
    @objc get
  }
  @objc override dynamic public func viewWillDisappear(_ animated: Swift.Bool)
  @objc public var trackSelectionDelegate: BanubaMusicEditorSDK.TrackSelectionViewControllerDelegate? {
    @objc get
    @objc set
  }
  @objc deinit
  @available(iOS 5.0, *)
  @objc override dynamic public init(navigationBarClass: Swift.AnyClass?, toolbarClass: Swift.AnyClass?)
  @objc override dynamic public init(rootViewController: UIKit.UIViewController)
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
}
public class BanubaAudioBrowser {
  public init(audioService: BanubaAudioBrowserSDK.AudioBrowserServiceAdoptable, audioBrowserConfig: BanubaAudioBrowserSDK.AudioBrowserConfig, slideInTransitioningDelegate: UIKit.UIViewControllerTransitioningDelegate, selectedTrack: BanubaAudioBrowserSDK.AudioBrowserTrack? = nil)
  public func getAudioBrowserController() -> BanubaAudioBrowserSDK.EditorNavigationController
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class ActivityIndicatorView : UIKit.UIView {
  @objc override dynamic public var bounds: CoreGraphics.CGRect {
    @objc get
    @objc set
  }
  public var configuration: BanubaAudioBrowserSDK.SmallActivityIndicatorConfiguration? {
    get
    set
  }
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
  public func startAnimating()
  public func stopAnimating()
  @objc deinit
}
public enum TrackDonwloadStatus : Swift.Int {
  case inProgress
  case done
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
public struct AudioBrowserTrack {
  public var taskId: Swift.String?
  public var downloadLink: Swift.String?
  public var downloadStatus: BanubaAudioBrowserSDK.TrackDonwloadStatus?
  public var name: Swift.String
  public var id: Swift.Int32
  public var duration: Foundation.TimeInterval?
  public var url: Foundation.URL?
  public var avAsset: AVFoundation.AVAsset? {
    get
  }
  public init(id: Swift.Int32, name: Swift.String, url: Foundation.URL?)
  public mutating func setupDuration(_ duration: Foundation.TimeInterval? = nil)
  public mutating func createAsset(withData: Foundation.Data) throws
  public mutating func deleteFile() throws
}
@objc @_inheritsConvenienceInitializers public class AudioBrowserService : ObjectiveC.NSObject, BanubaAudioBrowserSDK.AudioBrowserServiceAdoptable {
  weak public var audioBrowserServiceDelegate: BanubaAudioBrowserSDK.AudioBrowserPlayerDelegate?
  public func play()
  public func pause()
  public func load(trackUrl: Foundation.URL) throws
  public func seekToStart()
  public func seekToTime(_ time: Foundation.TimeInterval)
  public func unload()
  public func autoRepeat(repeat: Swift.Bool)
  @objc deinit
  @objc override dynamic public init()
}
public protocol AudioBrowserServiceAdoptable : AnyObject {
  func play()
  func pause()
  func load(trackUrl: Foundation.URL) throws
  func unload()
  func autoRepeat(repeat: Swift.Bool)
  func seekToStart()
  func seekToTime(_ time: Foundation.TimeInterval)
  var audioBrowserServiceDelegate: BanubaAudioBrowserSDK.AudioBrowserPlayerDelegate? { get set }
}
public protocol AudioBrowserPlayerDelegate : AnyObject {
  func playerPlaysFrameAtTime(_ time: Foundation.TimeInterval)
  func didEndPlaying()
}
@_inheritsConvenienceInitializers @objc public class AudioBrowserConfig : ObjectiveC.NSObject {
  @objc public var cornerRadius: CoreGraphics.CGFloat
  @objc public var backgroundColor: UIKit.UIColor
  @objc public var localMusicButtonImageName: Swift.String
  @objc public var myFilesButtonTitle: Swift.String
  @objc public var myFilesTitleConfiguration: BanubaAudioBrowserSDK.AudioBrowserTextConfiguration
  @objc public var titleConfiguration: BanubaAudioBrowserSDK.AudioBrowserTextConfiguration
  @objc public var coverPercentage: Swift.Double
  @objc public var categorySelectionConfig: BanubaAudioBrowserSDK.CategorySelectionConfig
  @objc public var preCategorySelectionConfig: BanubaAudioBrowserSDK.PreCategorySelectionConfig
  @objc public var trackSelectionConfig: BanubaAudioBrowserSDK.TrackSelectionConfig
  @objc public var myLibraryTrackSelectionConfig: BanubaAudioBrowserSDK.MyLibraryTrackSelectionConfig
  @objc public var toastConfiguration: BanubaAudioBrowserSDK.ToastConfiguration
  @objc public var mubertAudioConfig: BanubaAudioBrowserSDK.MubertAudioConfig
  @objc public var internetConnectionViewConfig: BanubaAudioBrowserSDK.ActionViewConfig
  @objc public var myLibraryPermissionViewConfig: BanubaAudioBrowserSDK.ActionViewConfig
  @objc public var errorViewConfig: BanubaAudioBrowserSDK.ErrorViewConfig
  @objc public var activityIndicatorConfig: BanubaAudioBrowserSDK.SmallActivityIndicatorConfiguration
  @objc public var selectedTrackViewConfiguration: BanubaAudioBrowserSDK.SelectedTrackViewConfiguration
  @objc convenience override dynamic public init()
  @objc public init(cornerRadius: CoreGraphics.CGFloat, backgroundColor: UIKit.UIColor, localMusicButtonImageName: Swift.String, myFilesButtonTitle: Swift.String, myFilesTitleConfiguration: BanubaAudioBrowserSDK.AudioBrowserTextConfiguration, titleConfiguration: BanubaAudioBrowserSDK.AudioBrowserTextConfiguration, coverPercentage: Swift.Double, categorySelectionConfig: BanubaAudioBrowserSDK.CategorySelectionConfig, preCategorySelectionConfig: BanubaAudioBrowserSDK.PreCategorySelectionConfig, trackSelectionConfig: BanubaAudioBrowserSDK.TrackSelectionConfig, myLibraryTrackSelectionConfig: BanubaAudioBrowserSDK.MyLibraryTrackSelectionConfig, toastConfiguration: BanubaAudioBrowserSDK.ToastConfiguration, mubertAudioConfig: BanubaAudioBrowserSDK.MubertAudioConfig, internetConnectionViewConfig: BanubaAudioBrowserSDK.ActionViewConfig, errorViewConfig: BanubaAudioBrowserSDK.ErrorViewConfig, activityIndicatorConfig: BanubaAudioBrowserSDK.SmallActivityIndicatorConfiguration, myLibraryPermissionViewConfig: BanubaAudioBrowserSDK.ActionViewConfig, selectedTrackViewConfiguration: BanubaAudioBrowserSDK.SelectedTrackViewConfiguration)
  @objc deinit
}
@objc public class MubertAudioConfig : ObjectiveC.NSObject {
  @objc public init(pat: Swift.String, categoryTracksAmount: Swift.Int, trackDuration: Swift.String, trackBitrate: Swift.String, trackIntencity: Swift.String, trackFormat: Swift.String)
  @objc public var pat: Swift.String
  @objc public var categoryTracksAmount: Swift.Int
  @objc public var trackDuration: Swift.String
  @objc public var trackBitrate: Swift.String
  @objc public var trackIntencity: Swift.String
  @objc public var trackFormat: Swift.String
  @objc override dynamic public init()
  @objc deinit
}
@objc public class CategorySelectionConfig : ObjectiveC.NSObject {
  @objc public init(backButtonImageName: Swift.String, searchBarTintColor: UIKit.UIColor, searchBarBackgroundColor: UIKit.UIColor, searchBarTextColor: UIKit.UIColor, searchBarStyle: UIKit.UIBarStyle, searchBarPlaceholder: BanubaAudioBrowserSDK.AudioBrowserTextConfiguration, searchBarPlaceholderText: Swift.String, seacrhBarText: BanubaAudioBrowserSDK.AudioBrowserTextConfiguration, tableViewColor: UIKit.UIColor, cellColor: UIKit.UIColor, titleViewColor: UIKit.UIColor, titleViewCornerRadius: CoreGraphics.CGFloat, titleConfiguration: BanubaAudioBrowserSDK.AudioBrowserTextConfiguration, categoryImageNames: [Swift.String], selectedImageName: Swift.String)
  @objc public var backButtonImageName: Swift.String
  @objc public var searchBarTintColor: UIKit.UIColor
  @objc public var searchBarBackgroundColor: UIKit.UIColor
  @objc public var searchBarTextColor: UIKit.UIColor
  @objc public var searchBarStyle: UIKit.UIBarStyle
  @objc public var searchBarPlaceholder: BanubaAudioBrowserSDK.AudioBrowserTextConfiguration
  @objc public var searchBarPlaceholderText: Swift.String
  @objc public var seacrhBarText: BanubaAudioBrowserSDK.AudioBrowserTextConfiguration
  @objc public var tableViewColor: UIKit.UIColor
  @objc public var cellColor: UIKit.UIColor
  @objc public var titleViewColor: UIKit.UIColor
  @objc public var titleViewCornerRadius: CoreGraphics.CGFloat
  @objc public var titleConfiguration: BanubaAudioBrowserSDK.AudioBrowserTextConfiguration
  @objc public var categoryImageNames: [Swift.String]
  @objc public var selectedImageName: Swift.String
  @objc override dynamic public init()
  @objc deinit
}
@objc public class PreCategorySelectionConfig : ObjectiveC.NSObject {
  @objc public init(backButtonImageName: Swift.String, searchBarTintColor: UIKit.UIColor, searchBarBackgroundColor: UIKit.UIColor, searchBarTextColor: UIKit.UIColor, searchBarStyle: UIKit.UIBarStyle, searchBarPlaceholder: BanubaAudioBrowserSDK.AudioBrowserTextConfiguration, searchBarPlaceholderText: Swift.String, seacrhBarText: BanubaAudioBrowserSDK.AudioBrowserTextConfiguration, tableViewColor: UIKit.UIColor, cellColor: UIKit.UIColor, titleViewColor: UIKit.UIColor, titleViewCornerRadius: CoreGraphics.CGFloat, titleConfiguration: BanubaAudioBrowserSDK.AudioBrowserTextConfiguration, categoryImageName: Swift.String)
  @objc public var backButtonImageName: Swift.String
  @objc public var searchBarTintColor: UIKit.UIColor
  @objc public var searchBarBackgroundColor: UIKit.UIColor
  @objc public var searchBarTextColor: UIKit.UIColor
  @objc public var searchBarStyle: UIKit.UIBarStyle
  @objc public var searchBarPlaceholder: BanubaAudioBrowserSDK.AudioBrowserTextConfiguration
  @objc public var searchBarPlaceholderText: Swift.String
  @objc public var seacrhBarText: BanubaAudioBrowserSDK.AudioBrowserTextConfiguration
  @objc public var tableViewColor: UIKit.UIColor
  @objc public var cellColor: UIKit.UIColor
  @objc public var titleViewColor: UIKit.UIColor
  @objc public var titleViewCornerRadius: CoreGraphics.CGFloat
  @objc public var titleConfiguration: BanubaAudioBrowserSDK.AudioBrowserTextConfiguration
  @objc public var categoryImageName: Swift.String
  @objc override dynamic public init()
  @objc deinit
}
@objc public class TrackSelectionConfig : ObjectiveC.NSObject {
  @objc public init(backButtonImageName: Swift.String, searchBarTintColor: UIKit.UIColor, searchBarBackgroundColor: UIKit.UIColor, searchBarTextColor: UIKit.UIColor, searchBarStyle: UIKit.UIBarStyle, searchBarPlaceholder: BanubaAudioBrowserSDK.AudioBrowserTextConfiguration, searchBarPlaceholderText: Swift.String, seacrhBarText: BanubaAudioBrowserSDK.AudioBrowserTextConfiguration, tableViewColor: UIKit.UIColor, cellColor: UIKit.UIColor, cellPlayingColor: UIKit.UIColor, playPauseButtonConfiguration: BanubaAudioBrowserSDK.ImageButtonConfiguration, downloadButtonTitleConfiguration: BanubaAudioBrowserSDK.AudioBrowserTextConfiguration, downloadButtonTitle: Swift.String, stopUsingButtonTitle: Swift.String, progressViewBackgroundColor: UIKit.UIColor, progressViewFillColor: UIKit.UIColor, titleConfiguration: BanubaAudioBrowserSDK.AudioBrowserTextConfiguration, durationTitleConfiguration: BanubaAudioBrowserSDK.AudioBrowserTextConfiguration, progressBackgroundColor: CoreGraphics.CGColor, progressFillColor: CoreGraphics.CGColor, cancelDownloadButton: BanubaAudioBrowserSDK.ImageButtonConfiguration)
  @objc public var backButtonImageName: Swift.String
  @objc public var searchBarTintColor: UIKit.UIColor
  @objc public var searchBarBackgroundColor: UIKit.UIColor
  @objc public var searchBarTextColor: UIKit.UIColor
  @objc public var searchBarStyle: UIKit.UIBarStyle
  @objc public var searchBarPlaceholder: BanubaAudioBrowserSDK.AudioBrowserTextConfiguration
  @objc public var searchBarPlaceholderText: Swift.String
  @objc public var seacrhBarText: BanubaAudioBrowserSDK.AudioBrowserTextConfiguration
  @objc public var tableViewColor: UIKit.UIColor
  @objc public var cellColor: UIKit.UIColor
  @objc public var cellPlayingColor: UIKit.UIColor
  @objc public var playPauseButtonConfiguration: BanubaAudioBrowserSDK.ImageButtonConfiguration
  @objc public var downloadButtonTitleConfiguration: BanubaAudioBrowserSDK.AudioBrowserTextConfiguration
  @objc public var downloadButtonTitle: Swift.String
  @objc public var stopUsingButtonTitle: Swift.String
  @objc public var progressViewBackgroundColor: UIKit.UIColor
  @objc public var progressViewFillColor: UIKit.UIColor
  @objc public var titleConfiguration: BanubaAudioBrowserSDK.AudioBrowserTextConfiguration
  @objc public var durationTitleConfiguration: BanubaAudioBrowserSDK.AudioBrowserTextConfiguration
  @objc public var progressBackgroundColor: CoreGraphics.CGColor
  @objc public var progressFillColor: CoreGraphics.CGColor
  @objc public var cancelDownloadButton: BanubaAudioBrowserSDK.ImageButtonConfiguration
  @objc override dynamic public init()
  @objc deinit
}
@objc public class MyLibraryTrackSelectionConfig : ObjectiveC.NSObject {
  @objc public init(backButtonImageName: Swift.String, searchBarTintColor: UIKit.UIColor, searchBarBackgroundColor: UIKit.UIColor, searchBarTextColor: UIKit.UIColor, searchBarStyle: UIKit.UIBarStyle, searchBarPlaceholder: BanubaAudioBrowserSDK.AudioBrowserTextConfiguration, searchBarPlaceholderText: Swift.String, seacrhBarText: BanubaAudioBrowserSDK.AudioBrowserTextConfiguration, tableViewColor: UIKit.UIColor, cellColor: UIKit.UIColor, cellPlayingColor: UIKit.UIColor, playPauseButtonConfiguration: BanubaAudioBrowserSDK.ImageButtonConfiguration, useButtonTitleConfiguration: BanubaAudioBrowserSDK.AudioBrowserTextConfiguration, useButtonTitle: Swift.String, progressViewBackgroundColor: UIKit.UIColor, progressViewFillColor: UIKit.UIColor, titleConfiguration: BanubaAudioBrowserSDK.AudioBrowserTextConfiguration, durationTitleConfiguration: BanubaAudioBrowserSDK.AudioBrowserTextConfiguration)
  @objc public var backButtonImageName: Swift.String
  @objc public var searchBarTintColor: UIKit.UIColor
  @objc public var searchBarBackgroundColor: UIKit.UIColor
  @objc public var searchBarTextColor: UIKit.UIColor
  @objc public var searchBarStyle: UIKit.UIBarStyle
  @objc public var searchBarPlaceholder: BanubaAudioBrowserSDK.AudioBrowserTextConfiguration
  @objc public var searchBarPlaceholderText: Swift.String
  @objc public var seacrhBarText: BanubaAudioBrowserSDK.AudioBrowserTextConfiguration
  @objc public var tableViewColor: UIKit.UIColor
  @objc public var cellColor: UIKit.UIColor
  @objc public var cellPlayingColor: UIKit.UIColor
  @objc public var playPauseButtonConfiguration: BanubaAudioBrowserSDK.ImageButtonConfiguration
  @objc public var useButtonTitleConfiguration: BanubaAudioBrowserSDK.AudioBrowserTextConfiguration
  @objc public var useButtonTitle: Swift.String
  @objc public var progressViewBackgroundColor: UIKit.UIColor
  @objc public var progressViewFillColor: UIKit.UIColor
  @objc public var titleConfiguration: BanubaAudioBrowserSDK.AudioBrowserTextConfiguration
  @objc public var durationTitleConfiguration: BanubaAudioBrowserSDK.AudioBrowserTextConfiguration
  @objc override dynamic public init()
  @objc deinit
}
@objc public class ErrorViewConfig : ObjectiveC.NSObject {
  @objc public init(commonErrorImage: BanubaAudioBrowserSDK.ImageConfiguration, emptySelectionImage: BanubaAudioBrowserSDK.ImageConfiguration, messageConfig: BanubaAudioBrowserSDK.AudioBrowserTextConfiguration)
  @objc public var commonErrorImage: BanubaAudioBrowserSDK.ImageConfiguration
  @objc public var emptySelectionImage: BanubaAudioBrowserSDK.ImageConfiguration
  @objc public var messageConfig: BanubaAudioBrowserSDK.AudioBrowserTextConfiguration
  @objc override dynamic public init()
  @objc deinit
}
@objc public class ActionViewConfig : ObjectiveC.NSObject {
  @objc public var title: Swift.String
  @objc public var titleConfig: BanubaAudioBrowserSDK.AudioBrowserTextConfiguration
  @objc public var message: Swift.String
  @objc public var messageConfig: BanubaAudioBrowserSDK.AudioBrowserTextConfiguration
  @objc public var buttonTitle: Swift.String
  @objc public var buttonTitleConfig: BanubaAudioBrowserSDK.AudioBrowserTextConfiguration
  @objc public var buttonColor: UIKit.UIColor
  @objc public var buttonCornerRadius: CoreGraphics.CGFloat
  @objc public init(title: Swift.String, titleConfig: BanubaAudioBrowserSDK.AudioBrowserTextConfiguration, message: Swift.String, messageConfig: BanubaAudioBrowserSDK.AudioBrowserTextConfiguration, buttonTitle: Swift.String, buttonTitleConfig: BanubaAudioBrowserSDK.AudioBrowserTextConfiguration, buttonColor: UIKit.UIColor, buttonCornerRadius: CoreGraphics.CGFloat)
  @objc deinit
  @objc override dynamic public init()
}
@objc public class SmallActivityIndicatorConfiguration : ObjectiveC.NSObject {
  public enum GradientType {
    case color(BanubaAudioBrowserSDK.SmallActivityIndicatorConfiguration.GradientColorConfiguration)
    case image(BanubaAudioBrowserSDK.ImageConfiguration)
  }
  @objc public class GradientColorConfiguration : ObjectiveC.NSObject {
    @objc public var angle: CoreGraphics.CGFloat
    @objc public var colors: Foundation.NSArray
    public init(angle: CoreGraphics.CGFloat, colors: Foundation.NSArray)
    @objc override dynamic public init()
    @objc deinit
  }
  public var gradientType: BanubaAudioBrowserSDK.SmallActivityIndicatorConfiguration.GradientType
  @objc public var activityLineWidth: CoreGraphics.CGFloat
  public init(gradientType: BanubaAudioBrowserSDK.SmallActivityIndicatorConfiguration.GradientType, activityLineWidth: CoreGraphics.CGFloat)
  @objc override dynamic public init()
  @objc deinit
}
@objc public class ToastConfiguration : ObjectiveC.NSObject {
  @objc public var kern: Swift.Double
  @objc public var font: UIKit.UIFont
  @objc public var cornerRadius: CoreGraphics.CGFloat
  @objc public init(kern: Swift.Double, font: UIKit.UIFont, cornerRadius: CoreGraphics.CGFloat)
  @objc override dynamic public init()
  @objc deinit
}
@objc public class AudioBrowserTextConfiguration : ObjectiveC.NSObject {
  @objc public var kern: Swift.Double
  @objc public var font: UIKit.UIFont
  @objc public var color: UIKit.UIColor
  @objc public var alignment: UIKit.NSTextAlignment
  @objc public init(kern: Swift.Double, font: UIKit.UIFont, color: UIKit.UIColor, alignment: UIKit.NSTextAlignment = .center)
  @objc override dynamic public init()
  @objc deinit
}
@objc public class ImageConfiguration : ObjectiveC.NSObject {
  @objc public var imageName: Swift.String
  @objc public var image: UIKit.UIImage? {
    @objc get
  }
  @objc public init(imageName: Swift.String)
  @objc public init(image: UIKit.UIImage)
  @objc override dynamic public init()
  @objc deinit
}
@objc public class ImageButtonConfiguration : ObjectiveC.NSObject {
  @objc public var imageConfiguration: BanubaAudioBrowserSDK.ImageConfiguration
  @objc public var selectedImageConfiguration: BanubaAudioBrowserSDK.ImageConfiguration?
  @objc public init(imageConfiguration: BanubaAudioBrowserSDK.ImageConfiguration, selectedImageConfiguration: BanubaAudioBrowserSDK.ImageConfiguration? = nil)
  @objc override dynamic public init()
  @objc deinit
}
@objc public class SelectedTrackViewConfiguration : ObjectiveC.NSObject {
  @objc final public let imageConfiuguration: BanubaAudioBrowserSDK.ImageConfiguration
  @objc final public let titleConfiguration: BanubaAudioBrowserSDK.AudioBrowserTextConfiguration
  @objc final public let stopUsingButtonTitle: Swift.String
  @objc final public let stopUsingButtonConfiguration: BanubaAudioBrowserSDK.AudioBrowserTextConfiguration
  @objc final public let backgroundColor: UIKit.UIColor
  @objc public init(imageConfiuguration: BanubaAudioBrowserSDK.ImageConfiguration, titleConfiguration: BanubaAudioBrowserSDK.AudioBrowserTextConfiguration, stopUsingButtonTitle: Swift.String, stopUsingButtonConfiguration: BanubaAudioBrowserSDK.AudioBrowserTextConfiguration, backgroundColor: UIKit.UIColor)
  @objc override dynamic public init()
  @objc deinit
}
extension String {
  public func lookUpForImage() -> UIKit.UIImage?
}
extension BanubaAudioBrowserSDK.TrackDonwloadStatus : Swift.Equatable {}
extension BanubaAudioBrowserSDK.TrackDonwloadStatus : Swift.Hashable {}
extension BanubaAudioBrowserSDK.TrackDonwloadStatus : Swift.RawRepresentable {}
